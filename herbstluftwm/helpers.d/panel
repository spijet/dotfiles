#!/usr/bin/env bash
shopt -s lastpipe

## Load config file:
CFGDIR="${XDG_CONFIG_HOME:-$HOME/.config}/herbstluftwm"
. "${CFGDIR}/global.conf"
## Also load color config and current theme opts:
. "${CFGDIR}/themes.d/current/colors.conf"
. "${CFGDIR}/themes.d/current/opts.conf"

hc() { "${herbstclient_command[@]:-herbstclient}" "$@" ;}
get_volume() { "${HLPDIR}/volume" get ;}

## Get launch options:
while getopts "dm:" opt; do
    case $opt in
        m) monitors+=("$OPTARG");;
        d) debug=on;;
    esac
done

[[ -z "${monitors[@]}" ]] && echo "No monitors specified." && exit 1
for monitor in "${monitors[@]}"; do
    # Pad the screen to panel height:
    hc pad "$monitor" "$PANELHEIGHT"
done

if [[ "$debug" = "on" ]]; then
    ## Feed the event loop:
    #  I feed the panel via herbstclient hooks.
    #  I also pipe the event list via awk to get rid of identical events (like
    #  redundant conky updates).
    make_fifo "${PANEL_FIFO}"
    herbstclient --idle | $AWK '$0 != l { print ; l=$0 ; fflush(); }' > "${PANEL_FIFO}" &
    type conky >/dev/null 2>&1 && "${HLPDIR}/hc-conky" &
else
    [[ -p "${PANEL_FIFO}" ]] || notify-send -u critical "Panel error!" "No FIFO found!"
fi

bgcolor="${IN_FRAMEBR}"
selbg="${AC_WINBR}"
selfg="${SE_TEXT}"

## Read the taglist and create the tag widget contents:
gentagline () {
    # Switch the font to glyphs:
    tagline["${1}"]="%{T2}"
    # Read the tag list:
    # IFS=$'\t' read -ra tags <<< "$(hc tag_status $monitor)"
    tags=( $(hc tag_status "${1}") )
    ## Tag statuses:
    #  '#' -- Tag is active and focused on current monitor;
    #  '+' -- Tag is active on current monitor,
    #         but another monitor is focused;
    #  ':' -- Tag is not active, but contains windows;
    #  '!' -- Tag contains an urgent window.
    for i in "${!tags[@]}" ; do
        case "${tags[i]:0:1}" in
            '#' ) tagcolor="%{B$selbg}%{F$selfg}";;
            '+' ) tagcolor="%{B#9CA668}%{F$selfg}";;
            ':' ) tagcolor="%{B-}%{F${AC_TEXT}}";;
            '!' ) tagcolor="%{B${UR_WINBR}}%{F$selfg}";;
            '-'|'%' ) tagcolor="%{B${IN_TEXT}}%{F$bgcolor}";;
            *   ) tagcolor="%{B-}%{F${IN_TEXT}}";;
        esac
        tagline["${1}"]+="${tagcolor}%{A:herbstclient chain .-. focus_monitor \"${1}\" .-. use \"${tags[i]:1}\":} ${tag_icons[i]} %{A}"
    done
    #  Switch font back to text:
    tagline["${1}"]+="%{T1}"
}

parsecmd () {
    #  The event and its arguments are read into the array cmd, then action is taken
    #  depending on the event name. "Special" events
    #  (quit_panel/togglehidepanel/reload) are also handled here.
    cmd="$1"
    case "${cmd[0]}" in
        tag*       ) for monitor in "${monitors[@]}"; do
                         gentagline "$monitor"
                     done;;
        conky      ) conky="${cmd[1]}";;
        battery    ) battery=" ${SEPARATOR} ${cmd[1]}";;
        *changed   ) windowtitle="${cmd[2]}";;
        layout     ) layout="${cmd[1]} $SEPARATOR";;
        volume     ) volume=$(printf "%b" "${cmd[1]}");;
        quit|reload) pkill -kill -u `whoami` conky
                     pkill -f 'awk.*events'
                     pkill -P $$
                     rm "${PANEL_FIFO}"
                     exit;;
    esac
}

## Pre-fill data:
for monitor in "${monitors[@]}"; do
    gentagline "$monitor"
done
conky=$(date "+%H%{F${IN_TEXT}}:%{F-}%M %{F${IN_TEXT}}%Y%{F${MI_TEXT}}%m%{F-}%d")
# layout="$(skb -1)"
layout=""
windowtitle="Welcome home."
volume=$(printf "%b" "$(get_volume)")
battery=""

## Here comes the event loop:
while IFS=$'\t' read -ra cmd; do
    # Check if the event is the same:
    [[ "${cmd[@]}" = "${old_cmd[@]}" ]] && continue
    # Parse the event:
    parsecmd "${cmd}"
    BAR_DATA=""
    for monitor in "${monitors[@]}"; do
        # Draw tags and window title:
        BAR_DATA+="%{S${monitor}}%{l}${tagline[${monitor}]}${SEPARATOR}      ${SEPARATOR} ${windowtitle//%{/% {}"
        # Draw info stuff on the right side of the panel and finish the line:
        BAR_DATA+="%{r} $layout $volume$battery $SEPARATOR $conky "
    done

    # Prevent lemonbar from re-rendering the same data:
    [[ "${BAR_DATA[@]:-lalala}" = "${OLD_BAR_DATA[@]:-lololo}" ]] && continue
    printf "%s\n" "${BAR_DATA}"

    # Store 'old' event and bar string, for future use:
    OLD_BAR_DATA="${BAR_DATA}"
    old_cmd="${cmd[@]}"
done < "${PANEL_FIFO}" |\
    lemonbar -g "x${PANELHEIGHT}" -a 20 \
             -f "${TEXTFONT}" -f "${GLYPHFONT}" \
             -B "$bgcolor" -F "${AC_TEXT}" |\
    sh
